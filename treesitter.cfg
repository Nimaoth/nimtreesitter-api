[n.global]
output = treesitter

[n.include]
$output/lib/include
$output/lib/include/tree_sitter
$output/lib/src
$output/utf8proc

[n.prepare]
gitremote.ts = "https://github.com/tree-sitter/tree-sitter"
gitcheckout.ts = "v0.25.6"
gitsparse.ts = """
lib/*
"""

gitoutput = utf8proc
gitremote.ut = "https://github.com/JuliaStrings/utf8proc"
gitsparse.ut = """
*.c
*.h
"""

[utf8proc_data.c]
prepend = "#include \"utf8proc.h\"\n"
noprocess = true

[stack.c]
search-win = "forceinline Stack"
replace-win = Stack
noprocess = true

[wasm_store.c]
search.1 = "stdlib-symbols.txt"
replace.1 = "wasm/stdlib-symbols.txt"
search.2 = "static inline"
replace.2 = "static"
noprocess = true

[api.h]
preprocess = true
defines = true
recurse = true

compile = $output/lib/src/lib.c

flags = "--stdcall --nep1"
pragma = "passC: \"-DUTF8PROC_STATIC\""
pragma-lin = "passC: \"-std=gnu11\""

[api.nim]
regex.1 = """([u]?int[\d]+)T"""
replace.1 = $1

search.2 = Bool
replace.2 = bool

regex.3 = """= tS[a-zA-Z]+"""
replace.3 = "= object"

regex.4 = """const headerApi = sourcePath / """
replace.4 = "const headerApi = sourcePath & "

search.5 = """TSWasmEngine* = wasmEngineT"""
prepend.5 = "wasmEngineT = object\n  "

regex.6 = """\{\.compile: "(.*lib\.c)"\.}"""
replace.6 = """

when defined(treesitterFeatureWasm):
  const treesitterWasmtimeIncludePath* {.strdefine.} = "lib/include"
  import wasmtime
  const treesitterWasmtimeIncludePathAbsolute = static:
    if treesitterWasmtimeIncludePath.isAbsolute:
      treesitterWasmtimeIncludePath
    else:
      wasmDir / treesitterWasmtimeIncludePath
  {.compile("$1", "-DTREE_SITTER_FEATURE_WASM -I" & treesitterWasmtimeIncludePathAbsolute).}
else:
  {.compile: "$1".}
"""

regex.7 = "TSStateId\\* = uint16"
replace.7 = "TSStateId* {.importc: \"TSStateId\", header: headerApi.} = uint16"
regex.8 = "TSSymbol\\* = uint16"
replace.8 = "TSSymbol* {.importc: \"TSSymbol\", header: headerApi.} = uint16"
regex.9 = "TSFieldId\\* = uint16"
replace.9 = "TSFieldId* {.importc: \"TSFieldId\", header: headerApi.} = uint16"
regex.10 = "TSLanguage\\* = object"
replace.10 = "TSLanguage* {.importc: \"TSLanguage\", header: headerApi.} = object"
regex.11 = "TSParser\\* = object"
replace.11 = "TSParser* {.importc: \"TSParser\", header: headerApi.} = object"
regex.12 = "TSTree\\* = object"
replace.12 = "TSTree* {.importc: \"TSTree\", header: headerApi.} = object"
regex.13 = "TSQuery\\* = object"
replace.13 = "TSQuery* {.importc: \"TSQuery\", header: headerApi.} = object"
regex.14 = "TSQueryCursor\\* = object"
replace.14 = "TSQueryCursor* {.importc: \"TSQueryCursor\", header: headerApi.} = object"
regex.15 = "TSLookaheadIterator\\* = object"
replace.15 = "TSLookaheadIterator* {.importc: \"TSLookaheadIterator\", header: headerApi.} = object"
regex.16 = "wasmEngineT\\ = object"
replace.16 = "wasmEngineT {.importc: \"TSWasmEngine\", header: headerApi.} = object"
regex.17 = "TSWasmStore\\* = object"
replace.17 = "TSWasmStore* {.importc: \"TSWasmStore\", header: headerApi.} = object"

regex.17 = "TSWasmStore\\* = object"
replace.17 = "TSWasmStore* {.importc: \"TSWasmStore\", header: headerApi.} = object"

regex.18 = "TSInputEncoding\\* {.size: sizeof\\(cint\\).} = enum"
replace.18 = "TSInputEncoding* {.importc: \"TSInputEncoding\", header: headerApi, size: sizeof(cint).} = enum"
regex.19 = "TSSymbolType\\* {.size: sizeof\\(cint\\).} = enum"
replace.19 = "TSSymbolType* {.importc: \"TSSymbolType\", header: headerApi, size: sizeof(cint).} = enum"
regex.20 = "TSLogType\\* {.size: sizeof\\(cint\\).} = enum"
replace.20 = "TSLogType* {.importc: \"TSLogType\", header: headerApi, size: sizeof(cint).} = enum"
regex.21 = "TSQuantifier\\* {.size: sizeof\\(cint\\).} = enum"
replace.21 = "TSQuantifier* {.importc: \"TSQuantifier\", header: headerApi, size: sizeof(cint).} = enum"
regex.22 = "TSQueryPredicateStepType\\* {.size: sizeof\\(cint\\).} = enum"
replace.22 = "TSQueryPredicateStepType* {.importc: \"TSQueryPredicateStepType\", header: headerApi, size: sizeof(cint).} = enum"
regex.23 = "TSQueryError\\* {.size: sizeof\\(cint\\).} = enum"
replace.23 = "TSQueryError* {.importc: \"TSQueryError\", header: headerApi, size: sizeof(cint).} = enum"
regex.24 = "TSWasmErrorKind\\* {.size: sizeof\\(cint\\).} = enum"
replace.24 = "TSWasmErrorKind* {.importc: \"TSInputEncoding\", header: headerApi, size: sizeof(cint).} = enum"